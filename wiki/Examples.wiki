#summary Examples
#labels Featured
<wiki:toc max_depth="1" />

=Hello World=
The following is an example of placing a component on a web page and component communication.<br>
The "Hello World" component displays the time-worn phrase when it receives a `greetWorld` event. It also displays a "hide greeting" button that hides the phrase and raises a `greetingHidden` event.<br>
The "Hello World" web page includes the component in-line and fires the 'greetWorld' event at it when the "greet world" button is pressed. The visibility of the "greet world" button is toggled for each event sent and received.

The working example can be found here: http://htmlcomponentframework.googlecode.com/svn/examples/hello-world/HelloWorld.html

==Hello World Component==
===HTML===
The following HTML (`HelloWorldComponent.html`) describes the Hello World component's events and content:
{{{
<html>
	<head>
		<meta name="HTMLComponent" />
		<meta name="eventUrl" content="http://htmlcomponentframework.googlecode.com/svn/examples/Event.html"/>
		<meta scheme="PartialJSONSchema" name="acceptsEvent" content='{"greetWorld": {"type": "null"}}' />
		<meta scheme="PartialJSONSchema" name="raisesEvent" content='{"greetingHidden": {"type": "null"}}' />
		<link rel="stylesheet" type="text/css" href="http://htmlcomponentframework.googlecode.com/svn/releases/1.0/ComponentFramework.css"/>
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/jquery-1.3.2.min.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/json2.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/jsonschema-b4.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/releases/1.0/ComponentFramework.js"></script>
		<script type="text/javascript" src="HelloWorldComponent.js"></script>
	</head>
	<body>
		<div id="togglePanel" style="display:none">Hello World! <button id="hideGreetingButton" type="button">hide greeting</button></div>
	</body>
</html>
}}}

===!JavaScript===
The following !JavaScript (`HelloWorldComponent.js`) describes the Hello World component's functionality:
{{{
function HelloWorldComponent()
{
	jQuery('#hideGreetingButton').click(hideGreeting);
	
	this.greetWorld = function()
	{
		jQuery('#togglePanel').show();
	}
	
	function hideGreeting()
	{
		jQuery('#togglePanel').hide();
		ComponentFramework.raiseEvent("greetingHidden");
	}
}
}}}

==Hello World Web Page==
===HTML===
The following HTML (`HelloWorld.html`) includes the component in-line and describes the web page's content:
{{{
<html>
	<head>
		<meta name="eventUrl" content="http://htmlcomponentframework.googlecode.com/svn/examples/Event.html"/>
		<meta scheme="JSON" name="includeComponent" content='{"name":"HelloWorldComponent","url":"HelloWorldComponent.html"}' />
		<link rel="stylesheet" type="text/css" href="http://htmlcomponentframework.googlecode.com/svn/releases/1.0/ComponentFramework.css"/>
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/jquery-1.3.2.min.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/json2.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/jsonschema-b4.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/releases/1.0/ComponentFramework.js"></script>
		<script type="text/javascript" src="HelloWorld.js"></script>
	</head>
	<body>
		<button id="greetWorldButton" type="button">greet world</button>
		<div id="helloWorldComponentId" title="HelloWorldComponent" class="cf_component_marker">
			<input type="hidden" name="loadedCallback" value="helloWorldComponentLoaded" />
		</div>
	</body>
</html>
}}}

===!JavaScript===
The following !JavaScript (`HelloWorld.js`) describes the web page's functionality:
{{{
jQuery(window).load(function()
{
	ComponentFramework.loadAndRender();
	jQuery('#greetWorldButton').click(greetWorld);
});

function helloWorldComponentLoaded()
{
	ComponentFramework.getComponent('helloWorldComponentId').addEventListener("greetingHidden", greetingHidden);
}

function greetWorld()
{
	jQuery('#greetWorldButton').hide();
	ComponentFramework.getComponent('helloWorldComponentId').fireEvent('greetWorld');
}

function greetingHidden()
{
	jQuery('#greetWorldButton').show();
}
}}}

=Banacek Website=
http://www.banacek.org

An example of a site that uses the framework. It contains the entire recorded catalogue of the band Banacek.

=Audio Player=
The following example isolates the audio player from the Banacek site: http://htmlcomponentframework.googlecode.com/svn/examples/audio-player/AudioPlayer.html

This also demonstrates the cross-domain application of components, as the Banacek components are hosted in a different location to the examples.

==HTML==
The following HTML (`AudioPlayer.html`) places the audio player component, from the Banacek site, on the page.
It also sets up some input fields for data to send to the component when an "add track" button is pressed.
{{{
<html>
	<head>
		<meta name="eventUrl" content="http://htmlcomponentframework.googlecode.com/svn/examples/Event.html"/>
		<meta scheme="JSON" name="includeComponent" content='{"name":"AudioPlayerComponent","url":"http://www.banacek.org/components/musicPlayer/MusicPlayer.html"}' />
		<link rel="stylesheet" type="text/css" href="http://htmlcomponentframework.googlecode.com/svn/releases/1.0/ComponentFramework.css"/>
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/jquery-1.3.2.min.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/json2.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/3rdpartylibs/jsonschema-b4.js"></script> 
		<script type="text/javascript" src="http://htmlcomponentframework.googlecode.com/svn/releases/1.0/ComponentFramework.js"></script>
		<script type="text/javascript" src="AudioPlayer.js"></script>
	</head>
	<body>
		Album image URL: <input type="text" id="albumImgUrlId" value="http://www.banacek.org/albumImgs/Banacek/Thumb.png"/ size="100"><br/>
		Album name: <input type="text" id="albumNameId" value="Banacek"/><br/>
		Track number: <input type="text" id="trackNumberId" value="4" size="2"/><br/>
		Track name: <input type="text" id="trackNameId" value="Queen Bee"/><br/>
		Track URL: <input type="text" id="trackUrlId" value="http://www.banacek.org/GetTrackUrl?trackId=banacek4" size="100"/><br/>
		<button id="addTrackButton" type="button">add track</button>
		<div id="audioPlayerComponentId" title="AudioPlayerComponent" class="cf_component_marker"></div>
	</body>
</html>
}}}

==!JavaScript==
The following !JavaScript (`AudioPlayer.js`) binds a function to the "add track" button; this function reads the data from the input fields into an object and sends it with an `add` event to the audio player component.
{{{
jQuery(window).load(function()
{
	ComponentFramework.loadAndRender();
	jQuery('#addTrackButton').click(addTrack);
});

function addTrack()
{
	var eventProperties = new Object();
	eventProperties.albumImgUrl = jQuery('#albumImgUrlId').val();
	eventProperties.albumName = jQuery('#albumNameId').val();
	eventProperties.trackNumber = jQuery('#trackNumberId').val();
	eventProperties.trackName = jQuery('#trackNameId').val();
	eventProperties.trackUrl = jQuery('#trackUrlId').val();
	ComponentFramework.getComponent('audioPlayerComponentId').fireEvent('add', eventProperties);
}
}}}

=CitroÃ«n 2CV Information=
The following example uses the carousel component from the Banacek site to create a pictoral history of the 2CV. Clicking on the images displays some information about that particular model:
http://htmlcomponentframework.googlecode.com/svn/examples/2cv-info/2cvInfo.html

This also demonstrates the cross-domain application of components, as the Banacek components are hosted in a different location to the examples.